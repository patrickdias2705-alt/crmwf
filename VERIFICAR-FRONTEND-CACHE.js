// ========================================
// VERIFICAR PROBLEMA DE CACHE NO FRONTEND
// ========================================
// Execute este script no console do navegador (F12)

console.log('üîç Verificando problema de cache no frontend...');

// 1. Verificar se h√° dados em localStorage
console.log('üì¶ Dados no localStorage:');
Object.keys(localStorage).forEach(key => {
  if (key.includes('supabase') || key.includes('auth') || key.includes('leads') || key.includes('sales')) {
    console.log(`  ${key}:`, localStorage.getItem(key));
  }
});

// 2. Verificar se h√° dados em sessionStorage
console.log('üì¶ Dados no sessionStorage:');
Object.keys(sessionStorage).forEach(key => {
  if (key.includes('supabase') || key.includes('auth') || key.includes('leads') || key.includes('sales')) {
    console.log(`  ${key}:`, sessionStorage.getItem(key));
  }
});

// 3. Verificar se h√° dados em cache do navegador
if ('caches' in window) {
  caches.keys().then(names => {
    console.log('üóÑÔ∏è Caches dispon√≠veis:', names);
    names.forEach(name => {
      caches.open(name).then(cache => {
        cache.keys().then(keys => {
          console.log(`  Cache ${name}:`, keys.length, 'entradas');
        });
      });
    });
  });
}

// 4. Verificar se h√° dados em mem√≥ria (vari√°veis globais)
console.log('üß† Dados em mem√≥ria:');
if (window.supabase) {
  console.log('  Supabase client:', window.supabase);
} else {
  console.log('  Supabase client n√£o encontrado');
}

// 5. Verificar se h√° dados em React state (se poss√≠vel)
if (window.React) {
  console.log('  React encontrado:', window.React.version);
} else {
  console.log('  React n√£o encontrado');
}

// 6. Verificar se h√° dados em Redux (se poss√≠vel)
if (window.__REDUX_DEVTOOLS_EXTENSION__) {
  console.log('  Redux DevTools encontrado');
} else {
  console.log('  Redux DevTools n√£o encontrado');
}

// 7. Verificar se h√° dados em IndexedDB
if ('indexedDB' in window) {
  console.log('  IndexedDB dispon√≠vel');
  // Tentar listar databases
  indexedDB.databases().then(databases => {
    console.log('  Databases IndexedDB:', databases);
  }).catch(err => {
    console.log('  Erro ao listar IndexedDB:', err);
  });
} else {
  console.log('  IndexedDB n√£o dispon√≠vel');
}

// 8. Verificar se h√° dados em WebSQL (deprecated)
if (window.openDatabase) {
  console.log('  WebSQL dispon√≠vel (deprecated)');
} else {
  console.log('  WebSQL n√£o dispon√≠vel');
}

// 9. Verificar se h√° dados em cookies
console.log('üç™ Cookies:');
document.cookie.split(';').forEach(cookie => {
  if (cookie.includes('supabase') || cookie.includes('auth') || cookie.includes('session')) {
    console.log(`  ${cookie.trim()}`);
  }
});

// 10. Verificar se h√° dados em URL parameters
console.log('üîó URL parameters:');
const urlParams = new URLSearchParams(window.location.search);
urlParams.forEach((value, key) => {
  console.log(`  ${key}: ${value}`);
});

// 11. Verificar se h√° dados em hash
console.log('üîó Hash da URL:');
if (window.location.hash) {
  console.log(`  ${window.location.hash}`);
} else {
  console.log('  Nenhum hash na URL');
}

// 12. Verificar se h√° dados em referrer
console.log('üîó Referrer:');
if (document.referrer) {
  console.log(`  ${document.referrer}`);
} else {
  console.log('  Nenhum referrer');
}

// 13. Verificar se h√° dados em user agent
console.log('üîç User Agent:');
console.log(`  ${navigator.userAgent}`);

// 14. Verificar se h√° dados em timezone
console.log('üåç Timezone:');
console.log(`  ${Intl.DateTimeFormat().resolvedOptions().timeZone}`);

// 15. Verificar se h√° dados em locale
console.log('üåç Locale:');
console.log(`  ${navigator.language}`);

// 16. Verificar se h√° dados em screen
console.log('üì± Screen:');
console.log(`  ${screen.width}x${screen.height}`);

// 17. Verificar se h√° dados em viewport
console.log('üì± Viewport:');
console.log(`  ${window.innerWidth}x${window.innerHeight}`);

// 18. Verificar se h√° dados em performance
console.log('‚ö° Performance:');
if (window.performance && window.performance.memory) {
  console.log(`  Mem√≥ria usada: ${Math.round(window.performance.memory.usedJSHeapSize / 1024 / 1024)}MB`);
  console.log(`  Mem√≥ria total: ${Math.round(window.performance.memory.totalJSHeapSize / 1024 / 1024)}MB`);
  console.log(`  Limite de mem√≥ria: ${Math.round(window.performance.memory.jsHeapSizeLimit / 1024 / 1024)}MB`);
} else {
  console.log('  Performance API n√£o dispon√≠vel');
}

console.log('‚úÖ Verifica√ß√£o de cache conclu√≠da!');
